cmake_minimum_required(VERSION 3.12)

project(QtTesting)

if(NOT DEFINED QtTesting_QT_VERSION)
    set(QtTesting_QT_VERSION "5" CACHE STRING "Expected Qt version")
    mark_as_advanced(QtTesting_QT_VERSION)
    set_property(CACHE QtTesting_QT_VERSION PROPERTY STRINGS 5 6)
endif()
if(
    NOT (
        QtTesting_QT_VERSION VERSION_EQUAL "5"
        OR QtTesting_QT_VERSION VERSION_EQUAL "6"
    )
)
    message(
        FATAL_ERROR
        "Expected value for QtTesting_QT_VERSION is either '5' or '6'"
    )
endif()

set(qt_imported_targets)
find_package(Qt${QtTesting_QT_VERSION} REQUIRED COMPONENTS Core Widgets Gui)
set(qt_imported_targets
    Qt${QtTesting_QT_VERSION}::Core
    Qt${QtTesting_QT_VERSION}::Widgets
    Qt${QtTesting_QT_VERSION}::Gui
)

if(NOT DEFINED QT_TESTING_WITH_PYTHON)
    option(QT_TESTING_WITH_PYTHON "Enable Qt Testing with Python" OFF)
endif()

if(NOT DEFINED QtTesting_INSTALL_BIN_DIR)
    set(QtTesting_INSTALL_BIN_DIR bin)
endif()

if(NOT DEFINED QtTesting_INSTALL_INCLUDE_DIR)
    set(QtTesting_INSTALL_INCLUDE_DIR include/QtTesting)
endif()

if(NOT DEFINED QtTesting_INSTALL_LIB_DIR)
    set(QtTesting_INSTALL_LIB_DIR lib)
endif()

if(NOT DEFINED QtTesting_INSTALL_CMAKE_DIR)
    set(QtTesting_INSTALL_CMAKE_DIR lib/cmake/qttesting)
endif()

if(NOT DEFINED QT_TESTING_EVENT_PLAYBACK_DELAY)
    set(QT_TESTING_EVENT_PLAYBACK_DELAY
        "100"
        CACHE STRING
        "Delay between invocation of each testing event."
        FORCE
    )
    mark_as_advanced(QT_TESTING_EVENT_PLAYBACK_DELAY)
endif()

if(NOT DEFINED QT_TESTING_INSTALL_EXPORT_NAME)
    set(QT_TESTING_INSTALL_EXPORT_NAME QtTestingTargets)
endif()

# One can define QT_TESTING_CUSTOM_LIBRARY_PREFIX and/or
# QT_TESTING_CUSTOM_LIBRARY_SUFFIX to add prefix/suffix to libraries
# generated by thus project. Default is empty.
if(NOT DEFINED QT_TESTING_CUSTOM_LIBRARY_SUFFIX)
    set(QT_TESTING_CUSTOM_LIBRARY_SUFFIX)
endif()
if(NOT DEFINED QT_TESTING_CUSTOM_LIBRARY_PREFIX)
    set(QT_TESTING_CUSTOM_LIBRARY_PREFIX)
endif()

if(QT_TESTING_WITH_PYTHON)
    if(NOT PythonLibs_FOUND)
        find_package(PythonLibs REQUIRED)
    endif()

    if(UNIX)
        find_library(
            PYTHON_UTIL_LIBRARY
            NAMES util
            PATHS /usr/lib
            DOC "Utility library needed for vtkpython"
        )
        mark_as_advanced(PYTHON_UTIL_LIBRARY)
        if(PYTHON_UTIL_LIBRARY)
            set(PYTHON_UTIL_LIBRARY_LIB ${PYTHON_UTIL_LIBRARY})
        endif()
    endif()

    include_directories(${PYTHON_INCLUDE_PATH})
    set(PYTHON_SRCS
        pqPythonEventObserver.cxx
        pqPythonEventObserver.h
        pqPythonEventSource.cxx
        pqPythonEventSource.h
    )
endif(QT_TESTING_WITH_PYTHON)

set(ui_files pqPlayBackEventsDialog.ui pqRecordEventsDialog.ui)
set(rc_files Resources/QtTesting.qrc)

set(CMAKE_AUTOMOC 1)
set(CMAKE_AUTOUIC 1)
set(CMAKE_AUTORCC 1)

set(QtTesting_SOURCES
    pq3DViewEventPlayer.cxx
    pq3DViewEventTranslator.cxx
    pqAbstractActivateEventPlayer.cxx
    pqAbstractBooleanEventPlayer.cxx
    pqAbstractButtonEventTranslator.cxx
    pqAbstractDoubleEventPlayer.cxx
    pqAbstractIntEventPlayer.cxx
    pqAbstractItemViewEventPlayer.cxx
    pqAbstractItemViewEventPlayerBase.cxx
    pqAbstractItemViewEventTranslator.cxx
    pqAbstractItemViewEventTranslatorBase.cxx
    pqAbstractMiscellaneousEventPlayer.cxx
    pqAbstractSliderEventTranslator.cxx
    pqAbstractStringEventPlayer.cxx
    pqBasicWidgetEventPlayer.cxx
    pqBasicWidgetEventTranslator.cxx
    pqCheckEventOverlay.cxx
    pqComboBoxEventTranslator.cxx
    pqComboBoxEventPlayer.cxx
    pqCommentEventPlayer.cxx
    pqDoubleSpinBoxEventTranslator.cxx
    pqEventComment.cxx
    pqEventDispatcher.cxx
    pqEventObserver.cxx
    pqEventPlayer.cxx
    pqEventRecorder.cxx
    pqEventTranslator.cxx
    pqLineEditEventTranslator.cxx
    pqListViewEventPlayer.cxx
    pqListViewEventTranslator.cxx
    pqMenuEventTranslator.cxx
    pqNativeFileDialogEventPlayer.cxx
    pqNativeFileDialogEventTranslator.cxx
    pqObjectNaming.cxx
    pqObjectPlayer.cxx
    pqPlayBackEventsDialog.cxx
    pqRecordEventsDialog.cxx
    pqSpinBoxEventTranslator.cxx
    pqStdoutEventObserver.cxx
    pqTabBarEventPlayer.cxx
    pqTabBarEventTranslator.cxx
    pqTableViewEventPlayer.cxx
    pqTableViewEventTranslator.cxx
    pqTestUtility.cxx
    pqThreadedEventSource.cxx
    pqTimer.cxx
    pqTreeViewEventPlayer.cxx
    pqTreeViewEventTranslator.cxx
    pqWidgetEventPlayer.cxx
    pqWidgetEventTranslator.cxx
)

set(QtTesting_DEVEL_HEADERS
    QtTestingExport.h
    pq3DViewEventPlayer.h
    pq3DViewEventTranslator.h
    pqAbstractActivateEventPlayer.h
    pqAbstractBooleanEventPlayer.h
    pqAbstractButtonEventTranslator.h
    pqAbstractDoubleEventPlayer.h
    pqAbstractIntEventPlayer.h
    pqAbstractItemViewEventPlayer.h
    pqAbstractItemViewEventPlayerBase.h
    pqAbstractItemViewEventTranslator.h
    pqAbstractItemViewEventTranslatorBase.h
    pqAbstractMiscellaneousEventPlayer.h
    pqAbstractSliderEventTranslator.h
    pqAbstractStringEventPlayer.h
    pqBasicWidgetEventPlayer.h
    pqBasicWidgetEventTranslator.h
    pqCheckEventOverlay.h
    pqComboBoxEventTranslator.h
    pqComboBoxEventPlayer.h
    pqCommentEventPlayer.h
    pqDoubleSpinBoxEventTranslator.h
    pqEventComment.h
    pqEventDispatcher.h
    pqEventObserver.h
    pqEventPlayer.h
    pqEventRecorder.h
    pqEventSource.h
    pqEventTranslator.h
    pqEventTypes.h
    pqLineEditEventTranslator.h
    pqListViewEventPlayer.h
    pqListViewEventTranslator.h
    pqMenuEventTranslator.h
    pqNativeFileDialogEventPlayer.h
    pqNativeFileDialogEventTranslator.h
    pqObjectNaming.h
    pqObjectPlayer.h
    pqPlayBackEventsDialog.h
    pqRecordEventsDialog.h
    pqSpinBoxEventTranslator.h
    pqStdoutEventObserver.h
    pqTabBarEventPlayer.h
    pqTabBarEventTranslator.h
    pqTableViewEventPlayer.h
    pqTableViewEventTranslator.h
    pqTestUtility.h
    pqThreadedEventSource.h
    pqTimer.h
    pqTreeViewEventPlayer.h
    pqTreeViewEventTranslator.h
    pqWidgetEventPlayer.h
    pqWidgetEventTranslator.h
    ${QtTesting_BINARY_DIR}/QtTestingConfigure.h
)

if(NOT DEFINED QTTESTING_BUILD_AS_VTK_MODULE)
    option(QTTESTING_BUILD_AS_VTK_MODULE "Build QtTesting as a VTK module" OFF)
endif()

if(QTTESTING_BUILD_AS_VTK_MODULE)
    # When building as a ThirdParty in ParaView
    # or in any vtk module based software
    # it can be useful to build qttesting as a VTK Module.
    # This macro is defined in VTK cmake macros
    vtk_module_add_module(ParaView::qttesting
      SOURCES
        ${QtTesting_SOURCES}
        ${ui_files}
        ${rc_files}
        ${PYTHON_SRCS}
      HEADERS
        ${QtTesting_DEVEL_HEADERS}
      HEADERS_SUBDIR
        "vtkqttesting"
    )
    set_target_properties(qttesting PROPERTIES DEFINE_SYMBOL QtTesting_EXPORTS)
    add_library(ParaView::qttesting ALIAS qttesting)
    target_include_directories(
        qttesting
        PUBLIC
            "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>"
            "$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>"
            "$<INSTALL_INTERFACE:${_vtk_build_HEADERS_DESTINATION}/vtkqttesting>"
    )
else()
    add_library(
        qttesting
        ${QtTesting_SOURCES}
        ${ui_files}
        ${rc_files}
        ${PYTHON_SRCS}
        ${QtTesting_DEVEL_HEADERS}
    )
    add_library(QtTesting ALIAS qttesting)

    target_include_directories(
        qttesting
        PUBLIC
            $<INSTALL_INTERFACE:${QtTesting_INSTALL_INCLUDE_DIR}>
            $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
            "$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>"
    )
endif()

target_compile_definitions(qttesting PRIVATE QT_NO_KEYWORDS)

# Set library name to include custom prefixes/suffixes.
set_property(
    TARGET qttesting
    PROPERTY
        OUTPUT_NAME
            ${QT_TESTING_CUSTOM_LIBRARY_PREFIX}qttesting${QT_TESTING_CUSTOM_LIBRARY_SUFFIX}
)

target_link_libraries(qttesting PRIVATE ${qt_imported_targets})

if(QT_TESTING_WITH_PYTHON)
    target_link_libraries(qttesting VTK::Python)
endif()

set(QTTESTING_BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS})
configure_file(
    ${QtTesting_SOURCE_DIR}/QtTestingConfigure.h.in
    ${QtTesting_BINARY_DIR}/QtTestingConfigure.h
)

if(NOT QTTESTING_BUILD_AS_VTK_MODULE)
    install(
        TARGETS qttesting
        EXPORT ${QT_TESTING_INSTALL_EXPORT_NAME}
        RUNTIME DESTINATION ${QtTesting_INSTALL_BIN_DIR} COMPONENT Runtime
        LIBRARY DESTINATION ${QtTesting_INSTALL_LIB_DIR} COMPONENT Runtime
        ARCHIVE DESTINATION ${QtTesting_INSTALL_LIB_DIR} COMPONENT Development
    )
endif()

if(NOT DEFINED BUILD_EXAMPLES)
    option(BUILD_EXAMPLES "Build examples" OFF)
endif()
if(BUILD_EXAMPLES)
    add_subdirectory(Examples)
endif()

include(CTest)
if(BUILD_TESTING)
    add_subdirectory(Testing)
endif()

export(TARGETS qttesting FILE ${QtTesting_BINARY_DIR}/QtTestingExports.cmake)

# Set up the build export configuration
set(QtTesting_EXPORT_FILE "${QtTesting_BINARY_DIR}/QtTestingConfig.cmake")
configure_file(
    "${QtTesting_SOURCE_DIR}/QtTestingConfig.cmake.in"
    "${QtTesting_EXPORT_FILE}"
    @ONLY
)

# Set up the install export
if(IS_ABSOLUTE QtTesting_INSTALL_INCLUDE_DIR)
    set(QtTesting_INSTALL_INCLUDE_FULL_DIR "${QtTesting_INSTALL_INCLUDE_DIR}")
else()
    set(QtTesting_INSTALL_INCLUDE_FULL_DIR
        "${CMAKE_INSTALL_PREFIX}/${QtTesting_INSTALL_INCLUDE_DIR}"
    )
    get_filename_component(
        QtTesting_INSTALL_INCLUDE_FULL_DIR
        "${QtTesting_INSTALL_INCLUDE_FULL_DIR}"
        ABSOLUTE
    )
endif()

if(IS_ABSOLUTE QtTesting_INSTALL_LIB_DIR)
    set(QtTesting_INSTALL_LIB_FULL_DIR "${QtTesting_INSTALL_LIB_DIR}")
else()
    set(QtTesting_INSTALL_LIB_FULL_DIR
        "${CMAKE_INSTALL_PREFIX}/${QtTesting_INSTALL_LIB_DIR}"
    )
    get_filename_component(
        QtTesting_INSTALL_LIB_FULL_DIR
        "${QtTesting_INSTALL_LIB_FULL_DIR}"
        ABSOLUTE
    )
endif()

set(QtTesting_EXPORT_INSTALL_FILE
    "${QtTesting_BINARY_DIR}/CMakeFiles/QtTestingConfig.cmake"
)
configure_file(
    "${QtTesting_SOURCE_DIR}/QtTestingConfig-install.cmake.in"
    "${QtTesting_EXPORT_INSTALL_FILE}"
    @ONLY
)

include(CMakePackageConfigHelpers)

# Configure '<PROJECT-NAME>Config.cmake'
# Use variables:
#   * targets_export_name
#   * PROJECT_NAME
configure_package_config_file(
    "${PROJECT_NAME}Config-install.cmake.in"
    "${QtTesting_EXPORT_INSTALL_FILE}"
    INSTALL_DESTINATION "${QtTesting_INSTALL_CMAKE_DIR}"
    NO_CHECK_REQUIRED_COMPONENTS_MACRO
)

if(NOT QtTesting_INSTALL_NO_DEVELOPMENT)
    install(
        FILES ${QtTesting_DEVEL_HEADERS}
        DESTINATION ${QtTesting_INSTALL_INCLUDE_DIR}
    )

    # Configure the CMake EXPORT file during installation
    install(
        FILES ${QtTesting_BINARY_DIR}/CMakeFiles/QtTestingConfig.cmake
        DESTINATION ${QtTesting_INSTALL_CMAKE_DIR}
    )
    install(
        EXPORT ${QT_TESTING_INSTALL_EXPORT_NAME}
        DESTINATION ${QtTesting_INSTALL_CMAKE_DIR}
    )
endif()
